---

- name: Include windows-common role
  include_role:
    name: windows-common

- name: Install python 2.7.13
  win_chocolatey:
    name: python2
    version: 2.7.13
    state: present

- name: Install feature Windows-Containers
  win_feature:
    name: 'Containers'
    state: present

- name: Install feature NET-Framework-Features
  win_feature:
    name: 'NET-Framework-Features'
    state: present

- name: Install feature Hyper-V
  win_feature:
    name: 'Hyper-V'
    include_management_tools: True
    state: present

- name: Install DockerProvider
  win_psmodule:
    name: DockerProvider

- name: Reboot the system
  win_reboot:
    test_command: powershell.exe 'Get-WindowsFeature'
    pre_reboot_delay: 15
    post_reboot_delay: 15
  tags:
    - skip_lint

- name: Wait for reconnection
  wait_for_connection:

- name: Install Docker-EE
  win_shell: "Install-Package Docker -ProviderName DockerProvider -Force"

- name: Pull docker images
  win_shell: "docker pull {{ item }}"
  with_items:
    - microsoft/nanoserver
    - microsoft/windowsservercore
    - python:3.6.5

- name: Install MS Visual C++ Redist 14
  win_chocolatey:
    name: vcredist140
    state: present

- name: Disable Windows Firewall
  win_firewall:
    profiles:
      - Domain
      - Private
    state: disabled

- name: Stop Docker
  win_service:
    name: docker
    state: stopped

- name: Remove NetNat objects
  win_shell: |
    Get-NetNat | Remove-NetNat -Confirm:$false

# Workaround for flaky HNS behavior.
# Removing container networks sometimes ends with "Unspecified error".
# For environment cleanup in tests it is acceptable to just ignore this error
# (-ErrorAction SilentlyContinue). However, this is not acceptable for
# template creation (we don't want to have unreliable template).
- name: Remove container networks (first attempt)
  win_shell: |
    Get-ContainerNetwork | Remove-ContainerNetwork -ErrorAction SilentlyContinue -Force

- name: Remove container networks (final attempt)
  win_shell: |
    Get-ContainerNetwork | Remove-ContainerNetwork -Force

- name: Create docker config directory
  win_file:
    path: 'C:\ProgramData\Docker\config'
    state: directory

- name: Disable docker's nat network
  register: docker_config_file
  win_copy:
    dest: 'C:\ProgramData\Docker\config\daemon.json'
    content: |
      {
        "bridge" : "none"
      }

# Workaround (#1) for Docker/Windows behavior.
# When WinNAT is enabled and NetNat object associated with default bridge
# network created by Docker exists, ICMP/UDP packets bigger than MTU do
# not reach containers and the host itself.
# Workaround (#2) for win_service behavior.
# We use win_shell instead of win_service because for this particular service
# win_service seems to fail ("An error occurred while creating the pipeline")
# while it works fine for other services like Docker.
- name: Stop  WinNAT
  win_shell: Stop-Service winnat

- name: Disable WinNAT
  win_shell: Set-Service -StartupType Disabled -Name winnat

- name: Enable testsigning
  win_shell: |
    Bcdedit.exe -set TESTSIGNING ON
