#!groovy
library "contrailWindows@$BRANCH_NAME"


pipeline {
    agent none

    options {
        skipDefaultCheckout()
        timeout time: 5, unit: 'HOURS'
        timestamps()
        lock label: 'testenv_pool', quantity: 1
    }

    stages {
        stage('Preparation') {
            agent { label 'ansible' }
            steps {
                deleteDir()

                retry(3) { // in case of external network flakiness
                    checkout scm
                }

                stash name: "Backups", includes: "backups/**"
                stash name: "CIScripts", includes: "CIScripts/**"
                stash name: "CISelfcheck", includes: "Invoke-Selfcheck.ps1"
                stash name: "StaticAnalysis", includes: "StaticAnalysis/**"
                stash name: "Ansible", includes: "ansible/**"
                stash name: "Monitoring", includes: "monitoring/**"
                stash name: "Flakes", includes: "flakes/**"
                stash name: "Test", includes: "Test/**"
            }
        }

        stage('Download Contrail Ansible Deployer') {
            agent { label 'builder' }
            steps {
                deleteDir()

                unstash "CIScripts"

                retry(3) { // in case of external network flakiness
                    powershell script: './CIScripts/Checkout.ps1'
                }

                stash name: "contrail-ansible-deployer", includes: "contrail-ansible-deployer/**"
            }
        }

        stage('Testenv provisioning') {
            agent { label 'ansible' }

            environment {
                TESTBED = credentials('win-testbed')
                COMPUTE_NODE_TEMPLATE = "Template-testbed-201812050309"
                DEPLOYER_TEMPLATE = "Template-testbed-201812050309"
                CONTROLLER_TEMPLATE = "Template-CentOS-7.5"
                TESTENV_MGMT_NETWORK = "VLAN_501_Management"
                TESTENV_FOLDER = "WINCI/testenvs"
                VCENTER_DATASTORE_CLUSTER = "WinCI-Datastores-SSD"
            }

            steps {
                echo "Testenv provisioning"
                // TODO
            }
        }

        stage('Deploy with Contrail Ansible Deployer') {
            agent none
            steps {
                echo "Deploy with Contrail Ansible Deployer"

                unstash "contrail-ansible-deployer"

                dir("contrail-ansible-deployer/config") {
                    powershell script: 'New-Item -Type File "instances.yaml"' // TODO: use actual instances.yaml file
                    stash name: 'instancesYaml', includes: '.\\instances.yaml'
                }
            }
        }

        stage('Run diagnostic check') {
            agent { label "tester" }
            steps {
                echo "Run diagnostic check"

                retry(3) { // in case of external network flakiness
                    powershell script: "git clone https://github.com/Juniper/contrail-windows-tools"
                }
                dir("contrail-windows-tools") {
                    unstash "instancesYaml"
                    powershell script: '.\\Invoke-ScriptInRemoteSessions -ScriptFileName ".\\Invoke-DiagnosticCheck.ps1" -InstancesYaml ".\\instances.yaml"'
                }
            }
        }
    }

    environment {
        LOG_SERVER = "logs.opencontrail.org"
        LOG_SERVER_USER = "zuul-win"
        LOG_SERVER_FOLDER = "winci"
        LOG_ROOT_DIR = "/var/www/logs"
        MYSQL = credentials('winstats-mysql')
        MYSQL_HOST = "winci-winstats"
        MYSQL_DATABASE = "monitoring"
    }

    post {
        always {
            echo "Post"
            // TODO
        }
    }
}
